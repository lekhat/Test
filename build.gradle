apply plugin: 'java'

task downloadWrapper(type: Wrapper) {
    description = "Download the gradle wrapper and requisite files. Overwrites existing wrapper files."
    gradleVersion = project.gradleVersion
}

allprojects {
  apply plugin: 'idea'
  apply plugin: 'eclipse'

  repositories {
    mavenLocal()
    mavenCentral()
  }
}

subprojects {
  apply plugin: 'java'

  dependencies {
    compile("com.typesafe:config:$configVersion")
    compile("commons-logging:commons-logging:$commonsLoggingVersion")
    testCompile("junit:junit:$junitVersion")
    testCompile("org.mockito:mockito-all:$mockitoVersion")
  }
}

project(":skute-server") {
  description "Serve metadata requests over REST and redirect data requests to Skute Streamers"

  apply plugin: 'war'
  apply plugin: 'jetty'
  apply plugin: 'application'

  dependencies {
    compile project(':skute-core')
    compile project(':skute-filesystem')

    compile("org.apache.hadoop:hadoop-common:$hadoopVersion") {
      exclude group: 'com.sun.jersey'
    }
    compile("org.apache.hadoop:hadoop-hdfs:$hadoopVersion") {
      exclude group: 'com.sun.jersey'
    }

    compile("commons-cli:commons-cli:$commonsCliVersion")
    compile("org.glassfish.jersey.containers:jersey-container-servlet-core:$jerseyVersion")
    compile("org.glassfish.jersey.core:jersey-client:$jerseyVersion")
    compile("org.glassfish.jersey.core:jersey-server:$jerseyVersion")

    compile("org.eclipse.jetty:jetty-server:$jettyVersion")
    compile("org.eclipse.jetty:jetty-servlet:$jettyVersion")

    testCompile("com.jayway.restassured:rest-assured:$restAssuredVersion")
    testCompile("org.glassfish.jersey.containers:jersey-container-jdk-http:$jerseyVersion")
  }

  mainClassName = "com.microsoft.cisl.skute.server.SkuteServer"
}

project(":skute-streamer") {
  description "Server non-metadata requests to clients."
  apply plugin: 'war'
  apply plugin: 'jetty'
  apply plugin: 'application'

  dependencies {
    compile project(':skute-core')
    compile project(':skute-filesystem')

    compile("org.apache.hadoop:hadoop-common:$hadoopVersion") {
      exclude group: 'com.sun.jersey'
    }
    compile("org.apache.hadoop:hadoop-hdfs:$hadoopVersion") {
      exclude group: 'com.sun.jersey'
    }

    compile("commons-cli:commons-cli:$commonsCliVersion")
    compile("org.glassfish.jersey.containers:jersey-container-servlet-core:$jerseyVersion")
    compile("org.glassfish.jersey.core:jersey-client:$jerseyVersion")
    compile("org.glassfish.jersey.core:jersey-server:$jerseyVersion")

    compile("org.eclipse.jetty:jetty-server:$jettyVersion")
    compile("org.eclipse.jetty:jetty-servlet:$jettyVersion")

    testCompile("com.jayway.restassured:rest-assured:$restAssuredVersion")
    testCompile("org.glassfish.jersey.containers:jersey-container-jdk-http:$jerseyVersion")
    testCompile("org.mockito:mockito-all:$mockitoVersion")
  }

  mainClassName = "com.microsoft.cisl.skute.SkuteStreamer"
}

project(":skute-core") {
  description "Base classes useful to all Skute components."

  dependencies {
    compile project(':skute-filesystem')

    compile("org.apache.hadoop:hadoop-common:$hadoopVersion") {
      exclude group: 'com.sun.jersey'
    }
    compile("org.apache.hadoop:hadoop-hdfs:$hadoopVersion") {
      exclude group: 'com.sun.jersey'
    }

    compile("commons-cli:commons-cli:$commonsCliVersion")
    compile("org.glassfish.jersey.containers:jersey-container-servlet-core:$jerseyVersion")
    compile("org.glassfish.jersey.core:jersey-client:$jerseyVersion")
    compile("org.glassfish.jersey.core:jersey-server:$jerseyVersion")

    compile("org.eclipse.jetty:jetty-server:$jettyVersion")
    compile("org.eclipse.jetty:jetty-servlet:$jettyVersion")

    testCompile("com.jayway.restassured:rest-assured:$restAssuredVersion")
    testCompile("org.glassfish.jersey.containers:jersey-container-jdk-http:$jerseyVersion")
    testCompile("org.mockito:mockito-all:$mockitoVersion")
  }
}

project(":skute-filesystem") {
  description "Filesystem abstract used by SkuteStreamer and SkuteServer."

  dependencies {
    compile("com.codahale.metrics:metrics-core:$metricsVersion")
  }
}

project(":skute-hadoop-filesystem") {
  description "Implementation of Skute filesystem backed by org.apache.hadoop.FileSystem."

  dependencies {
    compile project(':skute-filesystem')

    compile("org.apache.hadoop:hadoop-common:$hadoopVersion")// {
 //     exclude group: 'com.sun.jersey'
//    }

    compile("org.apache.hadoop:hadoop-minicluster:$hadoopVersion")// {
   //   exclude group: 'com.sun.jersey'
//    }
  }
}

project(":skute-client") {
  description "Tools and examples of clients that can consume from Skute."

  dependencies {
    compile("org.apache.hadoop:hadoop-common:$hadoopVersion")
    compile("org.apache.hadoop:hadoop-hdfs:$hadoopVersion")
    compile("org.apache.hadoop:hadoop-minicluster:$hadoopVersion")
    compile("org.apache.hadoop:hadoop-mapreduce-client-core:$hadoopVersion")
  }

 configurations {
    codeGen
  }

  sourceSets {
    codeGen {
      java.srcDir "${projectDir}/src/generated"
      compileClasspath += configurations.compile
    }
    main {
      runtimeClasspath += sourceSets.codeGen.output
    }
  }
  compileJava.dependsOn(compileCodeGenJava)

  // We should also take a look at Apache CXF, which seems to do the same thing:
  // http://cxf.apache.org/docs/jaxrs-services-description.html#JAXRSServicesDescription-wadl2javaMavenplugin
  // Current tools downloaded from here: https://wadl.java.net/
  task wadl2java(dependsOn: 'compileJava') << {
    description 'Generate a REST client from the WADL specification obtained through getWADL'
    if(!file("${projectDir}/src/main/resources/wadl/webhdfs.wadl").exists()) {
      println "hi!"
      getWADL.exec()
    }

    FileTree cp = fileTree(dir:"${projectDir}/resources/wadl-dist-1.1.6/lib", exclude:"**/wadl-cmdline*.jar")

    String target = "${projectDir}/src/generated"
    String description = "src/main/resources/wadl/webhdfs.wadl"
    ant.properties['wadl2java.project'] = "${projectDir}/resources/wadl-dist-1.1.6/bin/wadl2java"

    ant.taskdef(name: 'wjc',
        classname: 'org.jvnet.ws.wadl2java.WJCTask',
        classpath: cp.asPath /* And boy does it mean asPath... argh */)

    ant.wjc(package: 'com.microsoft.cisl.generated.wadl.client',
            target: target,
            description: description)
  }

  task getWADL(type:JavaExec) {
    description 'Query Hadoop for the definitive wadl specification WebHDFS is using. Write it to a file.'
    main = 'com.microsoft.cisl.GetWADLContract'
    classpath = sourceSets.main.runtimeClasspath
  }
}

project(":skute-webhdfs-test") {
  description "Start a Skute Server and Streamer backed up an Hadoop filesystem."

  apply plugin: 'application'

  dependencies {
    compile project(':skute-filesystem')
    compile project(':skute-server')
    compile project(':skute-hadoop-filesystem')
  }

  mainClassName = "com.microsoft.cisl.skute.server.SkuteServer"
}

